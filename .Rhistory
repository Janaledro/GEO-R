###Script para alluviales
library(alluvial)
install.packages("alluvial")
install.packages("plyr")
install.packages("biobase")
install.packages("Biobase")
install.packages("GEOquery")
source("https://bioconductor.org/biocLite.R")
biocLite("GEOquery")
install.packages("XML")
install.packages("xml2")
install.packages("xml2")
install.packages("XML")
biocLite("GEOquery")
install.packages("RCurl")
install.packages("rCUR")
install.packages("curl")
install.packages("RCurl")
biocLite("GEOquery")
biocLite("GEOquery")
install.packages("ggplot2")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
vignette(GEOquery)
vignette("GEOquery")
#A continuación se cargará la librería 'ggplot' para hacer gráficos
library("ggplot2")
#A continuación se cargará la librería 'ggplot' para hacer gráficos
library("ggplot2")
#A continuación se leerán los datos
GEO<-read.csv(file="data/GEO_tablet.tsv", header = T, sep = "\t",
na.strings = "", stringsAsFactors = T)
setwd("~/GEO-R/")
#A continuación se leerán los datos
GEO<-read.csv(file="data/GEO_tablet.tsv", header = T, sep = "\t",
na.strings = "", stringsAsFactors = T)
GEO.DF<-GEO[grepl(GEO$FECHA_DE_PUBLICACION, pattern = "Public_on_"),]
SPPs <- as.character(GEO.DF$ORGANISMO)
SPPstr<-unlist(strsplit(SPPs, split = ","))
ESPECIES<-grep("!Sample_", SPPstr, value = T, invert = T)
ESPECIES.DF<- data.frame(ESPECIES, stringsAsFactors = T)
ESPECIES.DF<-droplevels(ESPECIES.DF)
my.summary<-summary.data.frame(ESPECIES.DF, maxsum = 7)
ESPECIES.DF<-data.frame(ORGANISMO=, NUMERO_DE_ENTRADAS_EN_LA_TABLA=my.summary)
#ESPECIES.DF<-data.frame(ORGANISMO=, NUMERO_DE_ENTRADAS_EN_LA_TABLA=my.summary)
ESPECIES.DF<-data.frame(
ORGANISMO=c("Homo_sapiens", "Mus_musculus", "Arabidopsis_thaliana",
"Drosophila_melanogaster", "Rattus_novergicus", "Saccharomyces_cerevisiae",
"Other"),
NUMERO_DE_ENTRADAS_EN_LA_TABLA=c(21905, 14898, 1876, 1792, 1506, 1289, 12609),
stringsAsFactors = T)
bp<- ggplot(ESPECIES.DF, aes(x="", y=NUMERO_DE_ENTRADAS_EN_LA_TABLA, fill= ORGANISMO))+
geom_bar(width = 1, stat = "identity")
bp + scale_fill_brewer(palette="Dark2")
pie <- bp + coord_polar("y", start=0)
pie + scale_fill_brewer(palette="Dark2")
my.summary <- summary(GEO$ORGANISMO, maxsum = 7)
NUMEROS_POR_ESPECIE.DF<-data.frame(ORGANISMO=names(my.summary), NUMERO_DE_ENTRADAS_EN_LA_TABLA=my.summary)
####
#A continuación, el piechart
# Barplot
bp<- ggplot(NUMEROS_POR_ESPECIE.DF, aes(x="", y=NUMERO_DE_ENTRADAS_EN_LA_TABLA,
fill= ORGANISMO))+
geom_bar(width = 1, stat = "identity")
bp
pie <- bp + coord_polar("y", start=0)
pie
####
#A continuación se realizarán gráficos de comparación a lo largo del tiempo
GEO.DF$ANO <-0
GEO.DF$MES <-0
GEO.DF$DIA <-0
GEO.DF$FECHA_DE_PUBLICACION <- as.character(GEO.DF$FECHA_DE_PUBLICACION)
for(i in 1:nrow(GEO.DF)){
GEO.DF$ANO[i] <- unlist(strsplit(GEO.DF$FECHA_DE_PUBLICACION[i], split = "_"))[5]
GEO.DF$MES[i] <- unlist(strsplit(GEO.DF$FECHA_DE_PUBLICACION[i], split = "_"))[4]
GEO.DF$DIA[i] <- unlist(strsplit(GEO.DF$FECHA_DE_PUBLICACION[i], split = "_"))[3]
}
GEO.DF$ANO <-as.factor(GEO.DF$ANO)
GEO.DF$MES <-as.factor(GEO.DF$MES)
GEO.DF$DIA <-as.factor(GEO.DF$DIA)
fechas<- summary(GEO.DF$ANO)
NUMEROS_POR_ANO <- data.frame(ANO=names(fechas), NUMERO_DE_ENTRADAS = fechas)
ggplot(NUMEROS_POR_ANO, aes(x=ANO, y=NUMERO_DE_ENTRADAS)) +
geom_point()
####
#A CONTINUACIÓN GRAFICARMOS EL NÚMERO DE PROYECTOS CON DESCRIPCIÓN RESPECTO AL AÑO
#PRIMERO CREAREMOS UN VECTOR CON TODOS LOS AÑOS POSIBLES
anos <- levels(GEO.DF$ANO)
DATOS_POR_ANO.DF <- data.frame(ANO=factor(anos),
CON_RESUMEN=integer(length(anos)),
SIN_RESUMEN=integer(length(anos)),
TOTAL_DE_CARACTERES=numeric(length(anos)),
ARRAY=integer(length(anos)),
SEQ=integer(length(anos)),
NUMERO_DE_ESTUDIOS_EN_HUMANO =integer(length(anos)),
NUMERO_DE_ESTUDIOS_EN_RATON=integer(length(anos)),
stringsAsFactors=FALSE)
GEO.DF$RESUMEN_DEL_PROYECTO<-as.character(GEO.DF$RESUMEN_DEL_PROYECTO)
for (i in 1:nrow(DATOS_POR_ANO.DF)){
DATOS_POR_ANO.DF$ANO[i] <- anos[i]
DATOS_POR_ANO.DF$CON_RESUMEN[i] <-sum(!is.na(GEO.DF[GEO.DF$ANO == anos[i],"RESUMEN_DEL_PROYECTO"]))
DATOS_POR_ANO.DF$SIN_RESUMEN[i]<-sum(is.na(GEO.DF[GEO.DF$ANO == anos[i],"RESUMEN_DEL_PROYECTO"]))
DATOS_POR_ANO.DF$TOTAL_DE_CARACTERES[i]<- nchar(paste(GEO.DF[GEO.DF$ANO == anos[i],"RESUMEN_DEL_PROYECTO"], collapse = "")) / DATOS_POR_ANO.DF$CON_RESUMEN[i]
DATOS_POR_ANO.DF$ARRAY[i]<-length(grep("array", GEO.DF[GEO.DF$ANO == anos[i], "SERIES_TYPE"]))
DATOS_POR_ANO.DF$SEQ[i]<-length(grep("seq", GEO.DF[GEO.DF$ANO == anos[i], "SERIES_TYPE"]))
DATOS_POR_ANO.DF$NUMERO_DE_ESTUDIOS_EN_HUMANO[i]<-length(grep("Homo_sapiens", GEO.DF[GEO.DF$ANO == anos[i], "ORGANISMO"]))
DATOS_POR_ANO.DF$NUMERO_DE_ESTUDIOS_EN_RATON[i]<-length(grep("Mus_musculus", GEO.DF[GEO.DF$ANO == anos[i], "ORGANISMO"]))
}
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=TOTAL_DE_CARACTERES)) +
geom_point()
#GRÁFICA DE ESTUDIOS CON MICROARREGOS VS AÑOS
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=ARRAY)) +
geom_point()
#GRÁFICA DE ESTUDIOS CON SECUENCIACIÓN VS AÑOS
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=SEQ)) +
geom_point()
#GRÁFICA DE ESTUDIOS EN HUMANO VS AÑOS
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=NUMERO_DE_ESTUDIOS_EN_HUMANO)) +
geom_point()
#GRÁFICA DE ESTUDIOS EN RATÓN VS AÑOS
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=NUMERO_DE_ESTUDIOS_EN_RATON)) +
geom_point()
View(NUMEROS_POR_ANO)
View(NUMEROS_POR_ANO)
View(bp)
View(DATOS_POR_ANO.DF)
rep(c('a', 'b'), 6)
frame <- data.frame(series <- rep(c('a', 'b'), 6), sample <- rep(c('glass',
'water', 'metal'), 4), data <- c(1:12))
View(frame)
frame$grp <- paste(frame[,1],frame[,2])
#GRÁFICA DE ESTUDIOS EN HUMANO VS RATÓN A TRAVÉS DEL TIEMPO. PRIMERO HAY QUE ORGANIZAR
#LOS DATOS PARA COMPARARLOS EN PARALELO
rm(frame)
#GRÁFICA DE ESTUDIOS EN HUMANO VS RATÓN A TRAVÉS DEL TIEMPO. PRIMERO HAY QUE ORGANIZAR
#LOS DATOS PARA COMPARARLOS EN PARALELO
FRAME.DF<-data.frame(DATOS_POR_ANO.DF$ANO, DATOS_POR_ANO.DF$NUMERO_DE_ESTUDIOS_EN_HUMANO,
DATOS_POR_ANO.DF$NUMERO_DE_ESTUDIOS_EN_RATON)
FRAME.DF
Summary(DATOS_POR_ANO.DF$NUMERO_DE_ESTUDIOS_EN_HUMANO+DATOS_POR_ANO.DF$NUMERO_DE_ESTUDIOS_EN_RATON)
Summary(DATOS_POR_ANO.DF$NUMERO_DE_ESTUDIOS_EN_HUMANO+DATOS_POR_ANO.DF$NUMERO_DE_ESTUDIOS_EN_RATON)
y<-(DATOS_POR_ANO.DF$NUMERO_DE_ESTUDIOS_EN_HUMANO+DATOS_POR_ANO.DF$NUMERO_DE_ESTUDIOS_EN_RATON)
y
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=Ny, NUMERO_DE_ESTUDIOS_EN_HUMANO=NUMERO_DE_ESTUDIOS_EN_HUMANO,
NUMERO_DE_ESTUDIOS_EN_RATON=NUMERO_DE_ESTUDIOS_EN_RATON))+
geom_point()
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=y, NUMERO_DE_ESTUDIOS_EN_HUMANO=NUMERO_DE_ESTUDIOS_EN_HUMANO,
NUMERO_DE_ESTUDIOS_EN_RATON=NUMERO_DE_ESTUDIOS_EN_RATON))+
geom_point()
#GRÁFICA DE ESTUDIOS EN RATÓN VS AÑOS
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=NUMERO_DE_ESTUDIOS_EN_RATON)) +
geom_line()
#GRÁFICA DE ESTUDIOS EN RATÓN VS AÑOS
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=NUMERO_DE_ESTUDIOS_EN_RATON)) +
geom_line()
#GRÁFICA DE ESTUDIOS EN RATÓN VS AÑOS
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=NUMERO_DE_ESTUDIOS_EN_RATON)) +
geom_point+geom_line()
#GRÁFICA DE ESTUDIOS EN RATÓN VS AÑOS
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=NUMERO_DE_ESTUDIOS_EN_RATON)) +
geom_point() + geom_line()
View(FRAME.DF)
View(DATOS_POR_ANO.DF)
View(FRAME.DF)
data<-data.frame(dv=c(rnorm(30), rnorm(30, mean=1), rnorm(30, mean=2)),
iv=rep(1:30, 3),
group=rep(letters[1:3], each=30))
View(data)
View(FRAME.DF)
frame <- data.frame(series <- rep(c('a', 'b'), 6), sample <- rep(c('glass',
'water', 'metal'), 4), data <- c(1:12))
View(frame)
frame$grp <- paste(frame[,1],frame[,2])
frame$grp <- paste(frame[,1],frame[,2])
frame <- data.frame(series <- rep(c('a', 'b'), 6), sample <- rep(c('glass',
'water', 'metal'), 4), data <- c(1:12))
frame$grp <- paste(frame[,1],frame[,2])
rm(data, drame)
rm(data, frame)
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=TOTAL_DE_CARACTERES)) +
geom_point() + geom_line()
#GRÁFICA DE ESTUDIOS CON MICROARREGOS VS AÑOS
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=ARRAY), group=(interaction(ANO+ARRAY)))) +
geom_point()
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=TOTAL_DE_CARACTERES), group=(interaction(ANO+ARRAY))) +
geom_point() + geom_line()
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=TOTAL_DE_CARACTERES)) +
geom_point() + geom_line()
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=TOTAL_DE_CARACTERES)) +
geom_point()
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=TOTAL_DE_CARACTERES)) +
geom_line()
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=TOTAL_DE_CARACTERES)) +
stack_bar()
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=TOTAL_DE_CARACTERES)) +
barplot()
ggplot(DATOS_POR_ANO.DF, aes(x=ANO, y=TOTAL_DE_CARACTERES)) +
geom_point()
data.m<-melt(FRAME.DF, id.vars= "ANO")
library("reshape2")
data.m<-melt(FRAME.DF, id.vars= "ANO")
View(FRAME.DF)
names(FRAME.DF)[1]<-ANO
names(FRAME.DF)[1]<-"ANO"
names(FRAME.DF)[2]<-"NUMERO_DE_ESTUDIOS_EN_HUMANO"
names(FRAME.DF)[3]<-"NUMERO_DE_ESTUDIOS_EN_RATON"
data.m<-melt(FRAME.DF, id.vars= "ANO")
View(data.m)
ggplot(FRAME.DF, aes(ANO, value))+ geom_bar(aes(fill=variable), position "dodge", stat="identity")
ggplot(FRAME.DF, aes(ANO, value))+
geom_bar(aes(fill=variable), position "dodge", stat="identity")
ggplot(FRAME.DF, aes(ANO, value))+
geom_bar(aes(fill=variable), position= "dodge", stat="identity")
ggplot(data.m, aes(ANO, value))+
geom_bar(aes( fill= variable), position= "dodge", stat="identity")
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point() + geom_line()
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point()
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable))
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=NUMERO_DE_ESTUDIOS_EN_HUMANO_NUMERO_DE_ESTUDIOS_EN_RATON))
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=NUMERO_DE_ESTUDIOS_EN_HUMANO_NUMERO_DE_ESTUDIOS_EN_RATON))
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable))
ggplot(data.m, aes(ANO, value))+
geom_bar(aes( fill= variable), position= "dodge", stat="identity")
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable))
ggplot(data.m, aes(ANO, value))+
geom_bar(aes( fill= variable), position= "dodge", stat="identity") +
scale_fill_brewer(palette="Dark2")
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable)) + scale_fill_brewer(palette="Dark2")
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable)) + scale_fill_brewer(palette="Dark2")
#GRÁFICA QUE COMPARA ESTUDIOS REALIZADOS EN HUMANOS VS RATÓN CON PUNTOS
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable)) + scale_color_brewer(palette="Dark2")
#GRÁFICA QUE COMPARA ESTUDIOS REALIZADOS EN HUMANOS VS RATÓN CON PUNTOS
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable)) + scale_color_brewer(palette="Dark1")
#GRÁFICA QUE COMPARA ESTUDIOS REALIZADOS EN HUMANOS VS RATÓN CON PUNTOS
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable)) + scale_color_brewer(palette="Dark2")
#GRÁFICA QUE COMPARA ESTUDIOS REALIZADOS EN HUMANOS VS RATÓN CON PUNTOS
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable)) + scale_color_brewer(palette="Set2")
#GRÁFICA QUE COMPARA ESTUDIOS REALIZADOS EN HUMANOS VS RATÓN CON PUNTOS
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable)) + scale_color_brewer(palette="Set1")
#GRÁFICA QUE COMPARA ESTUDIOS REALIZADOS EN HUMANOS VS RATÓN CON PUNTOS
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable)) + scale_color_brewer(palette="Set3")
#GRÁFICA QUE COMPARA ESTUDIOS REALIZADOS EN HUMANOS VS RATÓN CON PUNTOS
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable)) + scale_color_brewer(palette="Set4")
#GRÁFICA QUE COMPARA ESTUDIOS REALIZADOS EN HUMANOS VS RATÓN CON PUNTOS
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable)) + scale_color_brewer(palette="Set1")
#GRÁFICA QUE COMPARA ESTUDIOS REALIZADOS EN HUMANOS VS RATÓN CON PUNTOS
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable)) + scale_color_brewer(palette="Set2")
#GRÁFICA QUE COMPARA ESTUDIOS REALIZADOS EN HUMANOS VS RATÓN CON PUNTOS
ggplot(data.m, aes(x=ANO, y=value)) +
geom_point(aes(fill=variable, color=variable)) + scale_color_brewer(palette="Set1")
