###Script para alluviales
library(alluvial)
install.packages("alluvial")
install.packages("plyr")
install.packages("biobase")
install.packages("Biobase")
install.packages("GEOquery")
source("https://bioconductor.org/biocLite.R")
biocLite("GEOquery")
install.packages("XML")
install.packages("xml2")
install.packages("xml2")
install.packages("XML")
biocLite("GEOquery")
install.packages("RCurl")
install.packages("rCUR")
install.packages("curl")
install.packages("RCurl")
biocLite("GEOquery")
biocLite("GEOquery")
install.packages("ggplot2")
################################################################
#   Boxplot for selected GEO samples
library(Biobase)
library(GEOquery)
vignette(GEOquery)
vignette("GEOquery")
#A continuación se cargará la librería 'ggplot' para hacer gráficos
library("ggplot2")
library("ggplot2")
library("reshape2")
library("alluvial")
library("dplyr")
setwd("~/GEO-R/")
#A continuación se cargará la librería 'ggplot' para hacer gráficos
library("ggplot2")
library("reshape2")
library("alluvial")
library("dplyr")
#A continuación se leerán los datos. Se recuerda ubicar el espacio de trabajo
#con "setwd()"
GEO<-read.csv(file="data/GEO_tablet.tsv", header = T, sep = "\t",
na.strings = "", stringsAsFactors = T)
GEO.DF<-GEO[grepl(GEO$FECHA_DE_PUBLICACION, pattern = "Public_on_"),]
#EN ESTA LÍNEA SE GENERARÁ UN DATA FRAME CON LAS LÍNEAS FALTANTES
GEO_DESFASADO.DF<-GEO[grep(GEO$FECHA_DE_PUBLICACION, pattern = "Public_on_", invert = T),]
palabras_tas<-c("_addiction_", "_alcoholism_", "_OCD_", "_coccaine_",
"_drug_abuse_", "_alcohol_", "_reward_","_substance_related_disorders_",
"_dopamine_", "_reward_mechanisms_",
"_alcohol_dependence_", "_marijuana_")
####
#CREANDO UN VACTOR VACÍO DONDE SE CONCATENARÁN TODOS LOS VECTORES DE CADA PALABRA
VECTOR_FINAL_DE_GREPS<-NA
#A CONTINUACIÓN CREAMOS EL LOOP FOR PARA BUSCAR UN VECTOR DE MATCHES DE MANERA
#ITERATIVA
for(i in 1:length(palabras_tas)){
message(paste0("Estoy buscando la palabra ", palabras_tas[i]))
indices<-grep(pattern = palabras_tas[i], GEO.DF$RESUMEN_DEL_PROYECTO,
ignore.case = T)
#indices<-grep(pattern = "cancer", GEO.DF$RESUMEN_DEL_PROYECTO,
#             ignore.case = T, invert = T)
#aquí se tiene que concatenar el vector "indices" con el vector final de greps
VECTOR_FINAL_DE_GREPS<-as.vector(rbind(VECTOR_FINAL_DE_GREPS, indices))
#c( matrix(c(VECTOR_FINAL_DE_GREPS,indices), nrow=2, byrow=TRUE) )
}
#VAMOS A ELIMINAR LOS VALORES NA
VECTOR_FINAL_DE_GREPS <- VECTOR_FINAL_DE_GREPS[!is.na(VECTOR_FINAL_DE_GREPS)]
#Y AHORA VAMOS A ELIMINAR ELEMENTOS REPETIDOS
VECTOR_FINAL_DE_GREPS<-unique(VECTOR_FINAL_DE_GREPS)
#AHORA VAMOS A EXTRAER LAS FILAS QUE NOS INTERESAN
GEO_FILTRADO<-GEO.DF[VECTOR_FINAL_DE_GREPS,]
#A CONTINUACIÓN SE REMOVERÁN TODOS LOS DATOS RELACIONADOS CON CÁNCER
GEO_FILTRADO.DF<-GEO_FILTRADO[grep("_cancer_", GEO_FILTRADO$RESUMEN_DEL_PROYECTO,
invert = T),]
##FINALMENTE, SE ESCRIBE UNA TABLA EN .CSV CON LOS RESULTADOS DE GREP
write.csv(GEO_FILTRADO.DF, "results/Estudios_para_TAS.csv")
##FINALMENTE, SE ESCRIBE UNA TABLA EN .CSV CON LOS RESULTADOS DE GREP
write.csv(GEO_FILTRADO.DF, "results/ESTUDIOS_PARA_TAS.csv")
palabras_tas
palabras_tas<-c("_addiction_", "_alcoholism_", "_coccaine_",
"_drug_abuse_", "_alcohol_", "_reward_","_substance_related_disorders_",
"_dopamine_", "_reward_mechanisms_",
"_alcohol_dependence_", "_marijuana_")
####
#CREANDO UN VACTOR VACÍO DONDE SE CONCATENARÁN TODOS LOS VECTORES DE CADA PALABRA
VECTOR_FINAL_DE_GREPS<-NA
#A CONTINUACIÓN CREAMOS EL LOOP FOR PARA BUSCAR UN VECTOR DE MATCHES DE MANERA
#ITERATIVA
for(i in 1:length(palabras_tas)){
message(paste0("Estoy buscando la palabra ", palabras_tas[i]))
indices<-grep(pattern = palabras_tas[i], GEO.DF$RESUMEN_DEL_PROYECTO,
ignore.case = T)
#indices<-grep(pattern = "cancer", GEO.DF$RESUMEN_DEL_PROYECTO,
#             ignore.case = T, invert = T)
#aquí se tiene que concatenar el vector "indices" con el vector final de greps
VECTOR_FINAL_DE_GREPS<-as.vector(rbind(VECTOR_FINAL_DE_GREPS, indices))
#c( matrix(c(VECTOR_FINAL_DE_GREPS,indices), nrow=2, byrow=TRUE) )
}
#VAMOS A ELIMINAR LOS VALORES NA
VECTOR_FINAL_DE_GREPS <- VECTOR_FINAL_DE_GREPS[!is.na(VECTOR_FINAL_DE_GREPS)]
#Y AHORA VAMOS A ELIMINAR ELEMENTOS REPETIDOS
VECTOR_FINAL_DE_GREPS<-unique(VECTOR_FINAL_DE_GREPS)
#AHORA VAMOS A EXTRAER LAS FILAS QUE NOS INTERESAN
GEO_FILTRADO<-GEO.DF[VECTOR_FINAL_DE_GREPS,]
#A CONTINUACIÓN SE REMOVERÁN TODOS LOS DATOS RELACIONADOS CON CÁNCER
GEO_FILTRADO.DF<-GEO_FILTRADO[grep("_cancer_", GEO_FILTRADO$RESUMEN_DEL_PROYECTO,
invert = T),]
GEO_FILTRADO.DF<-GEO_FILTRADO[grep("_myeloma_", GEO_FILTRADO$RESUMEN_DEL_PROYECTO,
invert = T),]
#AHORA VAMOS A EXTRAER LAS FILAS QUE NOS INTERESAN
GEO_FILTRADO<-GEO.DF[VECTOR_FINAL_DE_GREPS,]
#A CONTINUACIÓN CREAMOS EL LOOP FOR PARA BUSCAR UN VECTOR DE MATCHES DE MANERA
#ITERATIVA
for(i in 1:length(palabras_tas)){
message(paste0("Estoy buscando la palabra ", palabras_tas[i]))
indices<-grep(pattern = palabras_tas[i], GEO.DF$RESUMEN_DEL_PROYECTO,
ignore.case = T)
#indices<-grep(pattern = "cancer", GEO.DF$RESUMEN_DEL_PROYECTO,
#             ignore.case = T, invert = T)
#aquí se tiene que concatenar el vector "indices" con el vector final de greps
VECTOR_FINAL_DE_GREPS<-as.vector(rbind(VECTOR_FINAL_DE_GREPS, indices))
#c( matrix(c(VECTOR_FINAL_DE_GREPS,indices), nrow=2, byrow=TRUE) )
}
rm(VECTOR_FINAL_DE_GREPS)
#A CONTINUACIÓN CREAMOS EL LOOP FOR PARA BUSCAR UN VECTOR DE MATCHES DE MANERA
#ITERATIVA
for(i in 1:length(palabras_tas)){
message(paste0("Estoy buscando la palabra ", palabras_tas[i]))
indices<-grep(pattern = palabras_tas[i], GEO.DF$RESUMEN_DEL_PROYECTO,
ignore.case = T)
#indices<-grep(pattern = "cancer", GEO.DF$RESUMEN_DEL_PROYECTO,
#             ignore.case = T, invert = T)
#aquí se tiene que concatenar el vector "indices" con el vector final de greps
VECTOR_FINAL_DE_GREPS<-as.vector(rbind(VECTOR_FINAL_DE_GREPS, indices))
#c( matrix(c(VECTOR_FINAL_DE_GREPS,indices), nrow=2, byrow=TRUE) )
}
####
#CREANDO UN VACTOR VACÍO DONDE SE CONCATENARÁN TODOS LOS VECTORES DE CADA PALABRA
VECTOR_FINAL_DE_GREPS<-NA
#A CONTINUACIÓN CREAMOS EL LOOP FOR PARA BUSCAR UN VECTOR DE MATCHES DE MANERA
#ITERATIVA
for(i in 1:length(palabras_tas)){
message(paste0("Estoy buscando la palabra ", palabras_tas[i]))
indices<-grep(pattern = palabras_tas[i], GEO.DF$RESUMEN_DEL_PROYECTO,
ignore.case = T)
#indices<-grep(pattern = "cancer", GEO.DF$RESUMEN_DEL_PROYECTO,
#             ignore.case = T, invert = T)
#aquí se tiene que concatenar el vector "indices" con el vector final de greps
VECTOR_FINAL_DE_GREPS<-as.vector(rbind(VECTOR_FINAL_DE_GREPS, indices))
#c( matrix(c(VECTOR_FINAL_DE_GREPS,indices), nrow=2, byrow=TRUE) )
}
#VAMOS A ELIMINAR LOS VALORES NA
VECTOR_FINAL_DE_GREPS <- VECTOR_FINAL_DE_GREPS[!is.na(VECTOR_FINAL_DE_GREPS)]
#Y AHORA VAMOS A ELIMINAR ELEMENTOS REPETIDOS
VECTOR_FINAL_DE_GREPS<-unique(VECTOR_FINAL_DE_GREPS)
#AHORA VAMOS A EXTRAER LAS FILAS QUE NOS INTERESAN
GEO_FILTRADO<-GEO.DF[VECTOR_FINAL_DE_GREPS,]
#A CONTINUACIÓN SE REMOVERÁN TODOS LOS DATOS RELACIONADOS CON CÁNCER
GEO_FILTRADO.DF<-GEO_FILTRADO[grep("_cancer_", GEO_FILTRADO$RESUMEN_DEL_PROYECTO,
invert = T),]
GEO_FILTRADO.DF<-GEO_FILTRADO[grep("_myeloma_", GEO_FILTRADO$RESUMEN_DEL_PROYECTO,
invert = T),]
#A CONTINUACIÓN SE REMOVERÁN TODOS LOS DATOS RELACIONADOS CON CÁNCER
GEO_FILTRADO.DF<-GEO_FILTRADO[grep("_cancer_", GEO_FILTRADO$RESUMEN_DEL_PROYECTO,
invert = T),]
GEO_FILTRADO.DF<-GEO_FILTRADO.DF[grep("_myeloma_", GEO_FILTRADO.DF$RESUMEN_DEL_PROYECTO,
invert = T),]
##FINALMENTE, SE ESCRIBE UNA TABLA EN .CSV CON LOS RESULTADOS DE GREP
write.csv(GEO_FILTRADO.DF, "results/ESTUDIOS_PARA_TAS.csv")
#FILTRO PARA HOMO SAPIENS Y RATÓN
TAS_HS_MM.DF<-GEO_FILTRADO.DF[grep("Homo_sapiens", GEO_FILTRADO.DF$ORGANISMO), ]
TAS_HS_MM.DF<-TAS_HS_MM.DF[grep("Mus_musculus", TAS_HS_MM.DF$ORGANISMO), ]
#FILTRO PARA HOMO SAPIENS Y RATÓN
TAS_HS_MM.DF<-GEO_FILTRADO.DF[grep("Homo_sapiens", GEO_FILTRADO.DF$ORGANISMO), ]
#FILTRO PARA HOMO SAPIENS Y RATÓN
TAS_HS.DF<-GEO_FILTRADO.DF[grep("Homo_sapiens", GEO_FILTRADO.DF$ORGANISMO), ]
TAS_MM.DF<-TAS_HS_MM.DF[grep("Mus_musculus", TAS_HS_MM.DF$ORGANISMO), ]
TAS_HS_MM.DF<-rbind(TAS_HS.DF, TAS_MM.DF)
write.csv(TAS_HS_MM.DF, "results/TAS_EN_HH_Y_MM.csv")
TAS_HS_MM.DF<-unique(TAS_HS_MM.DF)
write.csv(TAS_HS_MM.DF, "results/TAS_EN_HH_Y_MM.csv")
write.csv(TAS_HS_MM.DF, "results/TAS_EN_HH_Y_MM.csv", col.names = T)
write.csv(TAS_HS_MM.DF, "results/TAS_EN_HH_Y_MM.csv")
